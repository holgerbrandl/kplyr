buildscript {
    ext.kotlin_version = '1.4.10'
    ext.dokka_version = '0.10.0' // see https://github.com/Kotlin/dokka/issues/656

    repositories {
        maven { url 'https://dl.bintray.com/kotlin/dokka' }
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokka_version}"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}



plugins { id "com.jfrog.bintray" version "1.8.1" }

apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'application'
//apply plugin: 'maven'
apply plugin: 'maven-publish'

// not neeeded but does not work without
mainClassName = "foo.Bar" // not needed but does not work without


repositories {
    mavenCentral()
    
//    mavenLocal()
    
    jcenter()
}


dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib"
    implementation "org.jetbrains.kotlin:kotlin-reflect"
//    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    // needed to work around https://youtrack.jetbrains.com/issue/KT-15064
    compileOnly "org.jetbrains.kotlin:kotlin-script-runtime:$kotlin_version"

//    testCompile "org.jetbrains.kotlin:kotlin-script-runtime:$kotlin_version"


    api  "org.apache.commons:commons-csv:1.6" // cant upgrade to 1.8 because of https://issues.apache.org/jira/browse/CSV-257
//    compile "com.univocity:univocity-parsers:2.7.5"
    api 'org.apache.poi:poi-ooxml:4.1.1' // For Excel read/write

    api  'com.beust:klaxon:5.0.1'//    compile 'me.tongfei:progressbar:0.5.5'

    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation 'io.kotlintest:kotlintest-assertions:3.4.2'
    testImplementation 'com.h2database:h2:1.3.148'
    //    testCompile "io.kotlintest:kotlintest-runner-junit5:3.1.9"
}


// disabled because would require to inherit StringSpec in all test classes
//test {
//    useJUnitPlatform()
//}


test {
    // Tests would fail with default memory settings
    // See https://stackoverflow.com/questions/20490105/gradleworkermain-outofmemoryerror
    maxHeapSize = "2048m"
}


//Minimal dokka configuration:
dokka {
    outputFormat = 'html'
//    outputDirectory = "$buildDir/javadoc"
    outputDirectory = "$projectDir/javadoc"

    configuration {

//    sourceDirs = files('src/test/kotlin')
        samples = ['src/test/kotlin/krangl/samples']

        // Emit warnings about not documented members. Applies globally, also can be overridden by packageOptions
        reportUndocumented = false

//    http://kotlinlang.org/docs/reference/kotlin-doc.html#module-and-package-documentation
        includes = ['docs/packages_info.md']
    }
}

// http://stackoverflow.com/questions/11474729/how-to-build-sources-jar-with-gradle
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

//task javadocJar(type: Jar, dependsOn: javadoc) {
//    classifier = 'javadoc'
//    from javadoc.destinationDir
//}

// see https://github.com/Kotlin/dokka/issues/42
task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
    outputFormat = 'javadoc'
    outputDirectory = javadoc.destinationDir

    configuration {
        reportUndocumented = false
        samples = ['src/test/kotlin/krangl/samples']
    }

    inputs.dir 'src/main/kotlin'
}

task javadocJar(type: Jar, dependsOn: dokkaJavadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

//http://stackoverflow.com/questions/34377367/why-is-gradle-install-replacing-my-version-with-unspecified
group 'de.mpicbg.scicomp'
//version '0.13'
version '0.15-SNAPSHOT'
//version '0.14.1'


artifacts {
    archives sourcesJar
    archives javadocJar
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact sourcesJar { classifier "sources" }
            artifact javadocJar
        }
    }
}

if (hasProperty('bintray_user') && hasProperty('bintray_key')) {
    bintray {

        // property must be set in ~/.gradle/gradle.properties
        user = bintray_user
        key = bintray_key

        publications = ['maven'] //When uploading configuration files

        dryRun = false //Whether to run this as dry-run, without deploying
        publish = true // If version should be auto published after an upload

        pkg {
            repo = 'mpicbg-scicomp'
            name = 'krangl'
            vcsUrl = 'https://github.com/holgerbrandl/krangl'

            licenses = ['MIT']
            publicDownloadNumbers = true

            //Optional version descriptor
            version {
                name = project.version //Bintray logical version name
                desc = '.'
                released = new Date()
                vcsTag = 'v' + project.version
            }
        }
    }
}
